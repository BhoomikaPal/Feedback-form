// CarAnimation.jsx

import React, { useEffect } from 'react';
import * as THREE from 'three';
import Stats from 'three/examples/js/libs/stats.min.js';
import dat from 'three/examples/js/libs/dat.gui.min.js';

function CarAnimation() {
  useEffect(() => {
    let xRotation = 0;
    let yRotation = 1;
    let zRotation = 0;
    let zoom = 75;
    const SPEED = 0.01;
    let mesh = null;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    document.body.appendChild(renderer.domElement);

    const light = new THREE.AmbientLight(0xffffff, 1);
    scene.add(light);

    const loader = new THREE.JSONLoader();
    loader.load("https://s3-us-west-2.amazonaws.com/s.cdpn.io/221620/camaro.js", function (geometry, materials) {
      const material = new THREE.MeshBasicMaterial({ color: 0xffffff, map: THREE.ImageUtils.loadTexture('//s3-us-west-2.amazonaws.com/s.cdpn.io/221620/camaro8.png') });

      mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      mesh.rotation.x = 0.35; // Sets initial xRot
    });

    camera.position.z = 6;

    function rotateMesh() {
      if (!mesh) {
        return;
      }

      mesh.rotation.x -= SPEED * xRotation;
      mesh.rotation.y -= SPEED * yRotation;
      mesh.rotation.z -= SPEED * zRotation;
      camera.fov = zoom;
      camera.updateProjectionMatrix();
    }

    function render() {
      requestAnimationFrame(render);
      rotateMesh();
      renderer.render(scene, camera);
    }
    render();

    // Stats
    const stats = new Stats();
    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
    document.body.appendChild(stats.dom);

    function animate() {
      stats.begin();
      // monitored code goes here
      stats.end();
      requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);

    return () => {
      // Cleanup Three.js resources if needed
    };
  }, []);

  return null;
}

export default CarAnimation;
